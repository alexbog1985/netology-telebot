import telebot
import random
from telebot import types
from telebot.handler_backends import StatesGroup, State

from db import get_user, add_user, get_words, get_random_eng_word, get_user_words

from settings import TG_TOKEN  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

bot = telebot.TeleBot(TG_TOKEN, state_storage=telebot.storage.StateMemoryStorage())  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    LEARN = '–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è'


class MyStates(StatesGroup):
    rus_word = State()
    target_eng_word = State()
    other_eng_words = State()


@bot.message_handler(commands=['cards', 'start'])
def start(message):

    cid = message.chat.id
    f_name = message.from_user.first_name
    l_name = message.from_user.last_name
    user_id = message.from_user.id
    username = message.from_user.username

    if get_user(cid) is None:
        add_user(cid, user_id, f_name, l_name, username, step=0)
        bot.send_message(cid, f'–ü—Ä–∏–≤–µ—Ç, {f_name} {l_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.')

    markup = types.ReplyKeyboardMarkup(row_width=2)

    go_btn = types.KeyboardButton(Command.LEARN)
    markup.add(go_btn)
    bot.send_message(cid, '–ü–æ–µ—Ö–∞–ª–∏?', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == Command.LEARN, content_types=['text'])
def learn(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)

    words = get_user_words(message.from_user.id)
    rus_word = words['rus_word']  # –†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ
    target_eng_word = words['eng_word']  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
    target_eng_word_button = types.KeyboardButton(target_eng_word)  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    other_eng_words = []  # –¥—Ä—É–≥–∏–µ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
    while len(other_eng_words) < 3:
        random_eng_word = get_random_eng_word()
        if random_eng_word not in other_eng_words and random_eng_word != target_eng_word:
            other_eng_words.append(random_eng_word)

    other_eng_word_buttons = [types.KeyboardButton(word) for word in other_eng_words]  # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫

    buttons = [target_eng_word_button] + other_eng_word_buttons  # —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    random.shuffle(buttons)  # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫

    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ "{rus_word}":', reply_markup=markup)

    bot.set_state(message.from_user.id, MyStates.rus_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['rus_word'] = rus_word
        data['target_eng_word'] = target_eng_word
        data['other_eng_words'] = other_eng_words


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            target_eng_word = data['target_eng_word']
        if message.text == target_eng_word:
            bot.send_message(message.chat.id, f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')
            learn(message)
        elif message.text == Command.NEXT:
            learn(message)
        elif message.text == Command.ADD_WORD:
            pass
        elif message.text == Command.DELETE_WORD:
            pass
        else:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start")

if __name__ == '__main__':
    print('Bot started')
    bot.polling(none_stop=True)